// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: stateMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TestCode {

  /// <summary>Holder for reflection information generated from stateMessage.proto</summary>
  public static partial class StateMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for stateMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StateMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJzdGF0ZU1lc3NhZ2UucHJvdG8SCFRlc3RDb2RlIrIBCglHYW1lU3RhdGUS",
            "DwoHc2Vuc29yMBgBIAEoAhIPCgdzZW5zb3IxGAIgASgCEg8KB3NlbnNvcjIY",
            "AyABKAISDwoHc2Vuc29yNBgEIAEoAhIMCgR2ZWxYGAUgASgCEgwKBHZlbFkY",
            "BiABKAISDAoEdmVsWhgHIAEoAhIMCgRyb3RYGAggASgCEgwKBHJvdFkYCSAB",
            "KAISDAoEcm90WhgKIAEoAhINCgVpbWFnZRgLIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TestCode.GameState), global::TestCode.GameState.Parser, new[]{ "Sensor0", "Sensor1", "Sensor2", "Sensor4", "VelX", "VelY", "VelZ", "RotX", "RotY", "RotZ", "Image" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TestCode.StateMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      sensor0_ = other.sensor0_;
      sensor1_ = other.sensor1_;
      sensor2_ = other.sensor2_;
      sensor4_ = other.sensor4_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      velZ_ = other.velZ_;
      rotX_ = other.rotX_;
      rotY_ = other.rotY_;
      rotZ_ = other.rotZ_;
      image_ = other.image_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "sensor0" field.</summary>
    public const int Sensor0FieldNumber = 1;
    private float sensor0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensor0 {
      get { return sensor0_; }
      set {
        sensor0_ = value;
      }
    }

    /// <summary>Field number for the "sensor1" field.</summary>
    public const int Sensor1FieldNumber = 2;
    private float sensor1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensor1 {
      get { return sensor1_; }
      set {
        sensor1_ = value;
      }
    }

    /// <summary>Field number for the "sensor2" field.</summary>
    public const int Sensor2FieldNumber = 3;
    private float sensor2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensor2 {
      get { return sensor2_; }
      set {
        sensor2_ = value;
      }
    }

    /// <summary>Field number for the "sensor4" field.</summary>
    public const int Sensor4FieldNumber = 4;
    private float sensor4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sensor4 {
      get { return sensor4_; }
      set {
        sensor4_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 5;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 6;
    private float velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "velZ" field.</summary>
    public const int VelZFieldNumber = 7;
    private float velZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelZ {
      get { return velZ_; }
      set {
        velZ_ = value;
      }
    }

    /// <summary>Field number for the "rotX" field.</summary>
    public const int RotXFieldNumber = 8;
    private float rotX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotX {
      get { return rotX_; }
      set {
        rotX_ = value;
      }
    }

    /// <summary>Field number for the "rotY" field.</summary>
    public const int RotYFieldNumber = 9;
    private float rotY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotY {
      get { return rotY_; }
      set {
        rotY_ = value;
      }
    }

    /// <summary>Field number for the "rotZ" field.</summary>
    public const int RotZFieldNumber = 10;
    private float rotZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotZ {
      get { return rotZ_; }
      set {
        rotZ_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 11;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensor0, other.Sensor0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensor1, other.Sensor1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensor2, other.Sensor2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sensor4, other.Sensor4)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelZ, other.VelZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotX, other.RotX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotY, other.RotY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotZ, other.RotZ)) return false;
      if (Image != other.Image) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sensor0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensor0);
      if (Sensor1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensor1);
      if (Sensor2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensor2);
      if (Sensor4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sensor4);
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (VelZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelZ);
      if (RotX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotX);
      if (RotY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotY);
      if (RotZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotZ);
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sensor0 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Sensor0);
      }
      if (Sensor1 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Sensor1);
      }
      if (Sensor2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Sensor2);
      }
      if (Sensor4 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Sensor4);
      }
      if (VelX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(VelY);
      }
      if (VelZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VelZ);
      }
      if (RotX != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotX);
      }
      if (RotY != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RotY);
      }
      if (RotZ != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(RotZ);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sensor0 != 0F) {
        size += 1 + 4;
      }
      if (Sensor1 != 0F) {
        size += 1 + 4;
      }
      if (Sensor2 != 0F) {
        size += 1 + 4;
      }
      if (Sensor4 != 0F) {
        size += 1 + 4;
      }
      if (VelX != 0F) {
        size += 1 + 4;
      }
      if (VelY != 0F) {
        size += 1 + 4;
      }
      if (VelZ != 0F) {
        size += 1 + 4;
      }
      if (RotX != 0F) {
        size += 1 + 4;
      }
      if (RotY != 0F) {
        size += 1 + 4;
      }
      if (RotZ != 0F) {
        size += 1 + 4;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.Sensor0 != 0F) {
        Sensor0 = other.Sensor0;
      }
      if (other.Sensor1 != 0F) {
        Sensor1 = other.Sensor1;
      }
      if (other.Sensor2 != 0F) {
        Sensor2 = other.Sensor2;
      }
      if (other.Sensor4 != 0F) {
        Sensor4 = other.Sensor4;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      if (other.VelZ != 0F) {
        VelZ = other.VelZ;
      }
      if (other.RotX != 0F) {
        RotX = other.RotX;
      }
      if (other.RotY != 0F) {
        RotY = other.RotY;
      }
      if (other.RotZ != 0F) {
        RotZ = other.RotZ;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Sensor0 = input.ReadFloat();
            break;
          }
          case 21: {
            Sensor1 = input.ReadFloat();
            break;
          }
          case 29: {
            Sensor2 = input.ReadFloat();
            break;
          }
          case 37: {
            Sensor4 = input.ReadFloat();
            break;
          }
          case 45: {
            VelX = input.ReadFloat();
            break;
          }
          case 53: {
            VelY = input.ReadFloat();
            break;
          }
          case 61: {
            VelZ = input.ReadFloat();
            break;
          }
          case 69: {
            RotX = input.ReadFloat();
            break;
          }
          case 77: {
            RotY = input.ReadFloat();
            break;
          }
          case 85: {
            RotZ = input.ReadFloat();
            break;
          }
          case 90: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
